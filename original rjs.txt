import React from 'react';
import ReactDOM from 'react-dom';
import './index.css'

const baseUrl = 'http://192.168.0.3:19001'

class ChatApp extends React.Component {
	constructor(props) {
		super(props);
		this.state = {
			username_text: "",
			message_text: "",
			username: "",
			id: -1,
			color: "#444444",
			messages: [],
		};

		setInterval(() => { this.get_messages() }, 500);

		this.handleChange = this.handleChange.bind(this);
	}

	handleChange(event) {
		this.setState({ username_text: event.target.value });
	}

	render() {
		let usname = this.state.username;
		if ( usname === "") {
			return (
				<div>
					<header style={{ 'backgroundColor': 'rgb(13, 99, 197)' }}>
						<h1>Chat App</h1>
					</header>
					<div className="login-body">
						<h1>Hello,</h1>
						<input
							type="text"
							placeholder="Enter temp username."
							value={this.state.username_text}
							onChange={this.handleChange}
							className="username-text" />
						<br />
						<button className = "login-button" onClick={this.onRegisterClick.bind(this)}>
							Login
						</button>
					</div>
				</div>
			);
		}
		else {
			return (
				<div className="chat-app-header">
					<header style={{ 'backgroundColor': this.state.color }}>
						<h1>Chat App</h1>
					</header>
					<div>
						
					</div>
				</div>
			);
		}
	}

	user_server(endpoint) {
		console.log(endpoint)
		fetch(
			baseUrl + endpoint,
			{
				method: 'POST',
				headers: {
					Accept: 'application/json',
					'Content-Type': 'application/json',
				},
				body: JSON.stringify({
					username: this.state.username_text
				}),
			}
		)
			.then((response) => response.json())
			.then((responseJson) => {
				if (responseJson.status === "success") {
					alert("success!" + responseJson.username);
					this.setState({
						username: responseJson.username,
						color: responseJson.color
					}, () => console.log(this.state));
					if (endpoint === "/register")
						this.get_messages();
					else {
						this.setState({
							username_text: "",
							message_text: "",
							username: "",
							id: -1,
							color: "#444444",
							messages: [],
						})
					}
				}
				else {
					alert('Choose different username!');
				}
			})
			.catch((error) => {
				console.log(error);
			});
	}

	async get_messages() {

		if (this.state.username === "")
			return;

		fetch(
			baseUrl + '/get_message',
			{
				method: 'POST',
				headers: {
					Accept: 'application/json',
					'Content-Type': 'application/json',
				},
				body: JSON.stringify({
					id: this.state.id
				}),
			}
		)
			.then((response) => response.json())
			.then((responseJson) => {
				if (responseJson.status === "success") {
					this.setState(prevState => {
						return {
							messages: prevState.messages.concat(responseJson.messages),
							id: responseJson.id
						}
					});
				}
				else {
					alert('Error retrieving messages!');
				}
			})
			.catch((error) => {
				console.error(error);
			}
			);
	}

	sendMessage() {
		console.log("responseJson.messages");

		if (this.state.username === "")
			return;

		if (this.state.message_text === "")
			return;

		fetch(
			baseUrl + '/send_message',
			{
				method: 'POST',
				headers: {
					Accept: 'application/json',
					'Content-Type': 'application/json',
				},
				body: JSON.stringify({
					username: this.state.username,
					message: this.state.message_text
				}),
			}
		)
		.then((response) => response.json())
		.then((responseJson) => {
			if (responseJson.status === "fail") {
				alert('Error sending message!');
			}
			else {
				this.message_field.clear();
				this.setState({ message_text: '' });
			}
		})
		.catch((error) => {
			console.error(error);
		}
		);
	}

	onRegisterClick() {
		console.log('onRegister');
		this.user_server("/register");
	}

	onBackClick() {
		console.log('onBack');
		this.user_server("/logout");
	}

	onSendClick() {
		console.log('onSend');
		this.sendMessage();
	}

}

// ============================================================

ReactDOM.render(
	<ChatApp />,
	document.getElementById('root')
);

